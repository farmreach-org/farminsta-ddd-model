/* The DDD Cargo sample application modeled in CML. Note that we split the application into multiple bounded contexts. */
ContextMap Farminsta {
	contains ClaimsManagement
	// contains VoyagePlanningContext
	// contains LocationContext

	/* As Evans mentions in his book (Bounded Context chapter): The voyage planning can be seen as
	 * separated bounded context. However, it still shares code with the booking application (ServiceRequestContext).
	 * Thus, they are in a 'Shared-Kernel' relationship.
	 */
	// ServiceRequestContext [SK]<->[SK] VoyagePlanningContext

	/* Note that the splitting of the LocationContext is not mentioned in the original DDD sample of Evans.
	 * However, locations and the management around them, can somehow be seen as a separated concept which is used by other
	 * bounded contexts. But this is just an example, since we want to demonstrate our DSL with multiple bounded contexts.
	 */
	// ServiceRequestContext [D]<-[U, OHS, PL] LocationContext

	// VoyagePlanningContext [D]<-[U, OHS, PL] LocationContext
}

BoundedContext ClaimsManagement {
  Application {
    Service ClaimsApplicationService {
      void submitClaim(@Claim claim);
      void checkInsurance(@Claim claim);
      void acceptClaim(@Claim claim);
      void rejectClaim(@Claim claim);
    }
  }
  
  Aggregate Claims {
    Entity Claim {
      aggregateRoot
      long claimId
      CustomerId customer
      String description
      Blob requestDocument
      boolean isComplete
      boolean isAssessed
      - ClaimState claimState
    }
    enum ClaimState {
      aggregateLifecycle
      OPEN, REJECTED, ACCEPTED
    }
    
    abstract DomainEvent ClaimEvent {
      long claimId
      Date timestamp
    }
    DomainEvent ClaimSubmitted extends ClaimEvent
    DomainEvent ClaimAccepted extends ClaimEvent
    DomainEvent ClaimRejected extends ClaimEvent
  }
}
